MEMORY {
    ZP:     file = "", start = $0000, size = $0100, type = rw, define = yes;   # Zero Page
    HEADER: file = %O, start = $0000, size = $0010, type = ro, fill = yes, fillval = $00; # Header

    ROM:  file = %O, start = $8000, size = $7FFA, type = ro, fill = yes, fillval = $00;    # PRG-ROM Bank
    ROMV: file = %O, start = $FFFA, size = $0006, type = ro, fill = yes, fillval = $00;    # Vectors

    RAM:    file = "", start = $0300, size = $0500, type = rw, define = yes;  # 2KB Internal RAM
    OAM:    file = "", start = $0200, size = $0100, type = rw;               # Sprite RAM
    PRGRAM: file = "", start = $6000, size = $2000, type = rw;            # 8KB PRG-RAM

    VRAM: file = "", start = $0000, size = $2000, type = rw;              # 8KB Video RAM
    CHRRAM: file = "", start = $0000, size = $2000, type = rw;            # 8KB Character RAM
}

SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    HEADER: load = HEADER, start = $0000, type = ro, optional = yes;            # RO header
    STARTUP: load = ROM, start = $8000, type = ro;                              # RO startup
    VECTORS: load = ROMV, start = $FFFA, type = ro, define = yes;               # Read-only vectors

    CODE: load = ROM, type = ro, define = yes;                   # RO ROM code
    RODATA: load = ROM, type = ro, define = yes;                               # RO ROM data
    
    BSS: load = RAM, type = bss, define = yes;                   # Uninitialized data in RAM
    PRGRAMDATA: load = PRGRAM, type = rw, optional = yes;        # Writable data in PRG-RAM
    
    OAMDATA: load = OAM, type = rw, optional = yes;              # Writable data in OAM
    VRAMDATA: load = VRAM, type = rw, optional = yes;            # Writable data in VRAM
    CHR: load = CHRRAM, type = rw, optional = yes; # Writable data in CHR-RAM
}

MEMORY {
    ZP:     file = "", start = $0000, size = $0100, type = rw, define = yes;   # Zero Page
    MEM_BANK01:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANK09:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANK0B:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANK0C:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANK0D:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANK0E:  file = %O, start = $8000, size = $4000, fill = yes, fillval = $00 ;
    MEM_BANKFIXED: file = %O, start = $C000, size = $4000, fill = yes, fillval = $00;
}

SEGMENTS {
    ZEROPAGE: load = ZP, type = zp;
    BANK_01:    load = MEM_BANK01, type = ro, align = $4000 ;
    BANK_09:    load = MEM_BANK09, type = ro, align = $4000 ;
    BANK_0B:    load = MEM_BANK0B, type = ro, align = $4000 ;
    BANK_0C:    load = MEM_BANK0C, type = ro, align = $4000 ;
    BANK_0D:    load = MEM_BANK0D, type = ro, align = $4000 ;
    BANK_0E:    load = MEM_BANK0E, type = ro, align = $4000 ;
    BANK_FIXED: load = MEM_BANKFIXED, type = ro, align = $4000;
    VECTORS: load = MEM_BANKFIXED, type = ro, start = $FFFA;
}
