MEMORY {
    HEADER: file = %O, start = $0000, size = $0010, type = ro, fill = yes, fillval = $00; # Header 16 bytes
    MEM_BANK00:  file = %O, start = $8000, size = $4000, fill = yes, type = ro; # Switchable banks. 16k each
    MEM_BANK01:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANK02:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANK03:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANK04:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANK05:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANK06:  file = %O, start = $8000, size = $4000, fill = yes, type = ro;
    MEM_BANKFIXED: file = %O, start = $C000, size = $4000, fill = yes, fillval = $00, type = ro; # Fixed bank. 16k

    ZP: file = "", start = $0000, size = $0100, type = rw, define = yes;   # Zero Page
    CHRROM: file = %O, start = $0000, size = $2000, type = ro, fill = yes, fillval = $FF; # 8KB Character ROM

    RAM:    file = "", start = $0300, size = $0500, type = rw, define = yes;  # 2KB Internal RAM
    OAM:    file = "", start = $0200, size = $0100, type = rw;                # Shadow OAM
}

SEGMENTS {
    HEADER: load = HEADER, type = ro, optional = yes; # Header
    BANK_00:  load = MEM_BANK00, type = ro, optional = yes; # Switchable banks
    BANK_01:  load = MEM_BANK01, type = ro, optional = yes; 
    BANK_02:  load = MEM_BANK02, type = ro, optional = yes;
    BANK_03:  load = MEM_BANK03, type = ro, optional = yes;
    BANK_04:  load = MEM_BANK04, type = ro, optional = yes;
    BANK_05:  load = MEM_BANK05, type = ro, optional = yes;
    BANK_06:  load = MEM_BANK06, type = ro, optional = yes;

    STARTUP: load = MEM_BANKFIXED, type = ro; # Startup segment. Not totally necessary.
    RODATA: load = MEM_BANKFIXED, type = ro, optional = yes;
    BANK_FIXED: load = MEM_BANKFIXED, type = ro, define = yes; # Fixed position bank
    VECTORS:    load = MEM_BANKFIXED, type = ro, start = $FFFA;

    ZEROPAGE: load = ZP, type = zp;

    BSS: load = RAM, type = bss, define = yes; # Uninit RAM data
    OAMDATA: load = OAM, type = rw, optional = yes; # Shadow OAM data
    CHR: load = CHRROM, type = ro; # CHR-ROM
}
